{
    "parserOptions": {
      "sourceType": "module",
      "allowImportExportEverywhere": true,
      "ecmaVersion": 2020
    },
    "parser": "@typescript-eslint/parser",
    "extends": ["next/core-web-vitals", "eslint:recommended", "plugin:react/recommended", "plugin:@typescript-eslint/recommended"],
    "plugins": [
      "react",
      "flowtype",
      "prettier",
      "@typescript-eslint"
    ],
    "globals": {
      "global": true,
      "require": true,
      "jest": true,
      "beforeEach": true,
      "afterEach": true,
      "describe": true,
      "it": true,
      "expect": true,
      "BlipChat": true,
      "process": true
    },
    "ignorePatterns": ["**/interfaces/**.ts"],
    "rules": {
      // "indent": ["warn", 2],
      "max-len": ["off", 200],
      "no-undef": "warn",
      "eqeqeq": ["error", "always"],
      // "no-magic-numbers": "warn",
      "semi": ["error", "always"],
      "no-extra-semi": "error",
      // "quotes": ["error", "double", { "avoidEscape": true }], //"avoidEscape": true allows strings to use single-quotes or double-quotes so long as the string contains a quote that would have to be escaped otherwise
      // "no-unused-vars": "warn",
      "no-console": ["error", {"allow" : ["warn", "error"]}],
      "prefer-const": "error",
      "no-trailing-spaces": "error",
      "no-multiple-empty-lines": ["error", { "max": 1, "maxEOF": 1 }],
      "flowtype/use-flow-type": "warn",
      "react/jsx-no-undef": "error",
      "react/react-in-jsx-scope": "off",
      "react/prop-types": "off",
      "react/no-unescaped-entities": "off",
      "linebreak-style":              ["error", "unix"],
      "no-dupe-keys":                 ["error"],
      "no-duplicate-case":            ["error"],
      "no-labels":                    ["error"],
      "no-mixed-spaces-and-tabs":     [2, "smart-tabs"],
      "no-redeclare":                 ["warn"],
      "no-return-assign":             ["error", "always"],
      "no-sequences":                 ["error"],
      "block-scoped-var":             ["error"],
      "callback-return":              ["off", ["done", "proceed", "next", "onwards", "callback", "cb"]],
      // "camelcase":                    ["warn", {"properties":"always"}],
      "comma-style":                  ["warn", "last"],
      "curly":                        ["warn"],
      "eol-last":                     ["warn"],
      "handle-callback-err":          ["error"],
      "no-unexpected-multiline":      ["warn"],
      "no-unreachable":               ["warn"],
      "no-unused-vars":               "off",
      "@typescript-eslint/no-unused-vars" : ["error", {"argsIgnorePattern": "^_", "varsIgnorePattern": "^_", "caughtErrorsIgnorePattern": "^_"}],
      "no-use-before-define":         ["error", {"functions":false}],
      "one-var":                      ["warn", "never"],
      "prefer-arrow-callback":        ["warn", {"allowNamedFunctions":true}],
      "quotes":                       ["warn", "single", {"avoidEscape":true, "allowTemplateLiterals":true}],
      "semi-spacing":                 ["warn", {"before":false, "after":true}],
      "semi-style":                   ["warn", "last"],
      "block-spacing": ["off"],
      "operator-linebreak": ["off"],
      "no-throw-literal": ["off"],
      "global-require": ["off"],
      "no-await-in-loop": ["off"],
      // "max-len": ["warn", { "code": 100 }],
      "comma-dangle": ["off"],
      "no-restricted-syntax": ["off"],
      "no-return-await": ["off"],
      "no-nested-ternary": ["warn"],// useful
      "consistent-return": ["off"],
      "no-useless-escape": ["off"],
      "no-shadow": ["off"],
      "no-loop-func": ["off"],
      "no-prototype-builtins": ["off"],
      "indent":                       ["warn", 2, {
        "SwitchCase": 1,
        "MemberExpression": "off",
        "FunctionDeclaration": {"body":1, "parameters":"off"},
        "FunctionExpression": {"body":1, "parameters":"off"},
        "CallExpression": {"arguments":"off"},
        "ArrayExpression": 1,
        "ObjectExpression": 1,
        "ignoredNodes": ["ConditionalExpression"]
      }],
      "@typescript-eslint/no-explicit-any": ["off"],
      "@typescript-eslint/no-non-null-assertion": ["error"],
      "prettier/prettier": ["error", {"singleQuote": true, "parser": "typescript", "endOfLine": "auto"}]
    }
  }